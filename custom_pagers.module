<?php
// $Id: custom_pagers.module,v 1.2 2007/01/03 18:36:11 eaton Exp $

/**
 * Implementation of hook_menu().
 */
function custom_pagers_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $access = user_access('administer custom pagers');
    $items[] = array(
      'path' => 'admin/build/custom_pagers',
      'title' => t('Custom pagers'),
      'description' => t('Add custom pagers for content types.'),
      'callback' => 'custom_pagers_page',
      'access' => $access
    );

    $items[] = array(
      'path' => 'admin/build/custom_pagers/add',
      'title' => t('Add custom pager'),
      'type' => MENU_CALLBACK,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('custom_pagers_form'),
      'access' => $access
    );

    $items[] = array(
      'path' => 'admin/build/custom_pagers/edit',
      'title' => t('Edit custom pager'),
      'type' => MENU_CALLBACK,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('custom_pagers_form'),
      'access' => $access
    );
  }

  return $items;
}

function custom_pagers_perm() {
  return array('administer custom pagers');
}

function custom_pagers_nodeapi($node, $op, $teaser, $page) {
  switch ($op) {
    case 'view':
      if ($teaser == false) {
        $pagers = _custom_pagers_load_all_pagers();
        foreach ($pagers as $pager) {
          if ($pager->position != 'block' && strpos($pager->node_type, $node->type) !== FALSE) {
            $nav_array = custom_pager_build_nav($pager, $node);
            $output = theme('custom_pager', $nav_array, $node, $pager);
            switch ($pager->position) {
              case 'top':
                $node->content['custom_pager_top'][$pager->pid] = array('#value' => $output);
                break;
              case 'bottom':
                $node->content['custom_pager_bottom'][$pager->pid] = array('#value' => $output);
                break;
              case 'both':
                $node->content['custom_pager_top'][$pager->pid] = array('#value' => $output);
                $node->content['custom_pager_bottom'][$pager->pid] = array('#value' => $output);
                break;
            }
          }
        }
        if (isset($node->content['custom_pager_top'])) {
          $node->content['custom_pager_top']['#weight'] = -100;
        }
        if (isset($node->content['custom_pager_bottom'])) {
          $node->content['custom_pager_bottom']['#weight'] = 100;
        }
      }
    break;
  }
}

/**
 * Implementation of hook_block().
 *
 * Generates a block with a pager for the current node.
 */
function custom_pagers_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $pagers = _custom_pagers_load_all_pagers();
    foreach ($pagers as $pager) {
      if ($pager->position == 'block') {
        $blocks[$pager->pid]['info'] = $pager->title;
      }
    }
    return $blocks;
  }
  else if ($op == 'view' && arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    $pagers = _custom_pagers_load_all_pagers();
    if ($pager = $pagers[$delta]) {
      if ($pager->position == 'block' && strpos($pager->node_type, $node->type) !== FALSE) {
        $nav_array = custom_pager_build_nav($pager, $node);
        $block['subject'] = $pager->title;
        $block['content'] = theme('custom_pager', $nav_array, $node, $pager);
        return $block;
      }
    }
  }
}

// Lists all current custom pagers, and provides a link to the edit page.
function custom_pagers_page() {
  $pagers = _custom_pagers_load_all_pagers(TRUE);

  $header = array(t('Title'), t('Node types'), '');

  $rows = array();
  foreach ($pagers as $pager) {
    $row = array();
    $row[] = $pager->title;
    $row[] = $pager->node_type;
    $row[] =  l(t('edit'), 'admin/build/custom_pagers/edit/' . $pager->pid);
    $rows[] = $row;
  }
  if (count($rows) == 0) {
    $rows[] = array(array('data' => t('No custom pagers have been defined.'), 'colspan' => 3));
  }
  
  $rows[] = array(array('data' => l(t('Add a new custom pager'), 'admin/build/custom_pagers/add'), 'colspan' => 2));


  return theme('table', $header, $rows);
}


// Displays an edit form for a custom pager record.
function custom_pagers_form() {
  $pid = arg(4);
  if (isset($pid)) {
    $pager = _custom_pagers_load_pager($pid);
    $form['pid'] = array(
      '#type' => 'hidden',
      '#value' => $pid,
    );
  }

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $pid ? $pager->title : '',
  );

  $form['node_type'] = array(
    '#type' => 'select',
    '#title' => t('Node types'),
    '#required' => TRUE,
    '#multiple' => TRUE,
    '#options' => node_get_types('names'),
    '#description' => t('The node types this custom pager will apply to.'),
    '#default_value' => $pid ? $pager->node_type : NULL,
  );

  $form['position'] = array(
    '#type' => 'select',
    '#title' => t('Pager position'),
    '#required' => TRUE,
    '#options' => array(
                    'top' => t("Above the node's body"),
                    'bottom' => t("Below the node's body"),
                    'both' => t("Both above and below the node's body"),
                    'block' => t("In a sidebar block"),
                  ),
    '#description' => t('The node type(s) this custom pager will apply to.'),
    '#default_value' => $pid ? $pager->position : NULL,
  );

  $options = array();
  include_once(drupal_get_path('module', 'views') . '/views_cache.inc');
  $default_views = _views_get_default_views();

  $res = db_query("SELECT name FROM {view_view} ORDER BY name");
  while ($view = db_fetch_object($res)) {
    $options[$view->name] = $view->name; 
  }
  
  if(is_array($default_views)) {
    foreach($default_views as $key => $view) {
      $options[$key] = $view->name;
    }
  }

  $form['view'] = array(
    '#type' => 'select',
    '#title' => t('Pager view'),
    '#required' => TRUE,
    '#options' => $options,
    '#description' => t('The view to use when generating this pager.'),
    '#default_value' => $pid ? $pager->view : NULL
  );

  $form['args'] = array(
    '#type' => 'textarea',
    '#title' => t('View arguments'),
    '#required' => FALSE,
    '#description' => t('A return-delimited list of arguments to pass into the selected view.'),
    '#default_value' => $pid ? $pager->args : NULL
  );

  $form['help'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Placeholder tokens'),
    '#description' => t("The following placeholder tokens can be used when passing arguments into the view. Each will be replaced with the correct values at runtime."),
  );

  $form['help']['tokens'] = array(
    '#value' => theme('token_help', 'node'),
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  if ($pid) {
    $form['buttons']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    );
  }

  return $form;
}

function custom_pagers_form_submit($form_id, $form_values) {
  if ($form_values['op'] == t('Delete')) {
    _custom_pagers_delete_pager($form_values['pid']);
  }
  else {
    $pager = (object)$form_values;
    $pager->node_type = implode(',', $pager->node_type);
    _custom_pagers_save_pager($pager);
  }
  return 'admin/build/custom_pagers';
}

function _custom_pagers_load_pager($pid) {
  $sql = 'SELECT * FROM {custom_pager} WHERE pid = %d';
  $result = db_query($sql, $pid);
  $pager = db_fetch_object($result);
  return $pager;
}

function _custom_pagers_load_all_pagers($refresh = FALSE) {
  static $pagers;
  if ($refresh || !isset($pagers)) {
    $sql = 'SELECT * FROM {custom_pager}';
    $result = db_query($sql);

    $pagers = array();
    while($pager = db_fetch_object($result)) {
      $pagers[] = $pager;
    }
  }
  return $pagers;
}

function _custom_pagers_save_pager($pager = NULL) {
  if (isset($pager->pid)) {
    $sql  = "UPDATE {custom_pager} SET";
    $sql .= " title = '%s', view = '%s', args = '%s', node_type = '%s', position = '%s'";
    $sql .= " WHERE pid = %d";
    db_query($sql, $pager->title, $pager->view, $pager->args, $pager->node_type, $pager->position, $pager->pid);
  }
  else {
    $sql  = "INSERT INTO {custom_pager}";
    $sql .= " (title, view, args, position, node_type)";
    $sql .= " VALUES ('%s', '%s',  '%s',  '%s', '%s')";
    db_query($sql, $pager->title, $pager->view, $pager->args, $pager->position, $pager->node_type);
  }
}

function _custom_pagers_delete_pager($pid) {
  $sql = 'DELETE FROM {custom_pager} WHERE pid = %d';
  db_query($sql, $pid);
}

function custom_pager_build_nav($pager, $node) {
    $list = array();
    $args = explode("\n", $pager->args);
    $args = token_replace($args, 'node', $node);
    $view = views_get_view($pager->view);
    $tmp = views_build_view('items', $view, $args);
    if (count($tmp['items'])) {
      foreach($tmp['items'] as $item) {
        $list[] = $item->nid;
      }
    }
    else {
      $list = array();
    }
  return pager_entries_by_val($node->nid, $list);
}

// Helper functions to pull proper entries from a list of nids.

function pager_entries_by_val($value, $list) {
  $list = array_values($list);
  foreach ($list as $k => $v) {
    if ($v == $value) {
      $key = $k;
    }
  }
  if (!isset($key)) {
    $key = -1;
  }
  return pager_entries_by_key($key, $list);
}

function pager_entries_by_key($key, $list, $increment = 1) {
  $list = array_values($list);
  $nav = array(
    'first' => $list[0],
    'prev' => $list[max($key - $increment, 0)],
    'next' => $list[min($key + $increment, (count($list) - 1))],
    'last' => $list[count($list) - 1],
    'full_list' => $list
  );

  foreach($nav as $k => $v) {
    if ($nav[$k] == $list[$key]) {
      $nav[$k] = NULL;
    }
  }
  
  $nav['current_index'] = $key;
  return $nav;
}

function theme_custom_pager($nav_array, $node, $pager) {
  if (is_numeric($nav_array['prev'])) {
    $prev = node_load($nav_array['prev']);
  }
  if (is_numeric($nav_array['next'])) {
    $next = node_load($nav_array['next']);
  }

  if ($prev || $next) {
    $output .= '<div class="custom-pager custom-pager-' . $node->type . '">';

    if ($prev) {
      $output .= l(t('‹ ') . $prev->title, 'node/'. $prev->nid, array('class' => 'pager-previous', 'title' => $prev->title));
    }
    if ($prev && $next) {
      // Word break (a is an inline element)
      $output .= ' ';
    }
    if ($next) {
      $output .= l($next->title . t(' ›'), 'node/'. $next->nid, array('class' => 'pager-next', 'title' => $next->title));
    }

    $output .= '</div>';
  }

  return $output;
}