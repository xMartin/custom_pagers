<?php
// $Id: custom_pagers.module,v 1.1 2006/12/08 04:10:27 eaton Exp $

/**
 * Implementation of hook_menu().
 */
function custom_pagers_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $access = user_access('administer custom pagers');
    $items[] = array(
      'path' => 'admin/build/custom_pagers',
      'title' => t('Custom pagers'),
      'description' => t('Add custom pagers for content types.'),
      'callback' => 'custom_pagers_page',
      'access' => $access
    );

    $items[] = array(
      'path' => 'admin/build/custom_pagers/add',
      'title' => t('Add custom pager'),
      'type' => MENU_CALLBACK,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('custom_pagers_form'),
      'access' => $access
    );

    $items[] = array(
      'path' => 'admin/build/custom_pagers/edit',
      'title' => t('Edit custom pager'),
      'type' => MENU_CALLBACK,
      'callback' => 'drupal_get_form',
      'callback arguments' => array('custom_pagers_form'),
      'access' => $access
    );
  }

  return $items;
}

function custom_pagers_perm() {
  return array('administer custom pagers');
}

function custom_pagers_nodeapi($node, $op, $teaser, $page) {
  switch ($op) {
    case 'insert':
    case 'update':
    case 'delete':
      // for now, it's easier just to blow away the caching.
      // We'll figure out a more efficient way later.
      cache_clear_all('custom_pagers_', 'cache', TRUE);
      break;
    case 'view':
      if ($teaser == false) {
        if ($pager = _custom_pagers_load_for_type($node->type)) {
          if ($pager->position != 'block') {
            $nav_array = custom_pager_build_nav($pager, $node);
            $output = theme('custom_pager', $nav_array, $node, $pager);
          }
        }
        switch ($pager->position) {
          case 'top':
            $node->content['custom_pager_top'] = array(
              '#value' => $output,
              '#weight' => -100,
            );
            break;
          case 'bottom':
            $node->content['custom_pager_bottom'] = array(
              '#value' => $output,
              '#weight' => 100,
            );
            break;
          case 'both':
            $node->content['custom_pager_top'] = array(
              '#value' => $output,
              '#weight' => -100,
            );
            $node->content['custom_pager_bottom'] = array(
              '#value' => $output,
              '#weight' => 100,
            );
            break;
        }
      }
    break;
  }
}

/**
 * Implementation of hook_block().
 *
 * Generates a block with a pager for the current node.
 */
function custom_pagers_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Custom pager');
    return $blocks;
  }
  else if ($op == 'view' && arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($pager = _custom_pagers_load_for_type($node->type)) {
      if ($pager->position == 'block') {
        $nav_array = custom_pager_build_nav($pager, $node);
        $output = theme('custom_pager', $nav_array, $node, $pager);
      }
    }
    if ($output) {
      $block['subject'] = t('Custom pager');
      $block['content'] = theme('custom_pager', $nav_array, $node, $pager);
      return $block;
    }
  }
}

// Lists all current custom pagers, and provides a link to the edit page.
function custom_pagers_page() {
  $pagers = _custom_pagers_load_all_pagers(TRUE);

  $header = array(t('node type'), '');

  $rows = array();
  foreach ($pagers as $pager) {
    $row = array();
    $row[] = $pager->node_type;
    $row[] =  l(t('edit'), 'admin/build/custom_pagers/edit/' . $pager->pid);
    $rows[] = $row;
  }
  if (count($rows) == 0) {
    $rows[] = array(array('data' => t('No custom pagers have been defined.'), 'colspan' => 2));
  }
  
  $rows[] = array(array('data' => l(t('Add a new custom pager'), 'admin/build/custom_pagers/add'), 'colspan' => 2));


  return theme('table', $header, $rows);
}


// Displays an edit form for a custom pager record.
function custom_pagers_form() {
  $pid = arg(4);
  if (isset($pid)) {
    $pager = _custom_pagers_load_pager($pid);
    $form['pid'] = array(
      '#type' => 'hidden',
      '#value' => $pid,
    );
  }

  $form['node_type'] = array(
    '#type' => 'select',
    '#title' => t('Node types'),
    '#required' => TRUE,
    '#multiple' => TRUE,
    '#options' => node_get_types('names'),
    '#description' => t('The node types this custom pager will apply to.'),
    '#default_value' => $pid ? $pager->node_type : NULL,
  );

  $form['position'] = array(
    '#type' => 'select',
    '#title' => t('Pager position'),
    '#required' => TRUE,
    '#options' => array(
                    'top' => t("Above the node's body"),
                    'bottom' => t("Below the node's body"),
                    'both' => t("Both above and below the node's body"),
                    'block' => t("In a sidebar block"),
                  ),
    '#description' => t('The node type(s) this custom pager will apply to.'),
    '#default_value' => $pid ? $pager->position : NULL,
  );

  $options = array();
  include_once(drupal_get_path('module', 'views') . '/views_cache.inc');
  $default_views = _views_get_default_views();

  $res = db_query("SELECT name FROM {view_view} ORDER BY name");
  while ($view = db_fetch_object($res)) {
    $options[$view->name] = $view->name; 
  }
  
  if(is_array($default_views)) {
    foreach($default_views as $key => $view) {
      $options[$key] = $view->name;
    }
  }

  $form['view'] = array(
    '#type' => 'select',
    '#title' => t('Pager view'),
    '#required' => TRUE,
    '#options' => $options,
    '#description' => t('The view to use when generating this pager.'),
    '#default_value' => $pid ? $pager->view : NULL
  );

  $form['args'] = array(
    '#type' => 'textarea',
    '#title' => t('View arguments'),
    '#required' => FALSE,
    '#description' => t('A return-delimited list of arguments to pass into the selected view.'),
    '#default_value' => $pid ? $pager->args : NULL
  );

  $substitutions = custom_pagers_substitutions('help');
  $header = array(t('Placeholder'), t('Replacement value'));
  $rows = array();
  foreach ($substitutions as $sub => $help) {
    $row = array();
    $row[] = $sub;
    $row[] = $help;
    $rows[] = $row;
  }
  $helptext = theme('table', $header, $rows, array('class' => 'description'), "The following placeholder values can be used in the view arguments. They will be replaced with the appropriate values.");

  $form['help'] = array(
    '#value' => $helptext,
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  if ($pid) {
    $form['buttons']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    );
  }

  return $form;
}

function custom_pagers_form_validate($form_id, $form_values) {
  $path_count = count(explode("\n", $form_values['paths']));
  $title_count = count(explode("\n", $form_values['titles']));
  if ($title_count != $path_count) {
    form_set_error(t('Every link path must have a matching title. There are !paths paths, and !titles titles.', array('!paths' => $path_count, '!titles' => $title_count)));
  }
}

function custom_pagers_form_submit($form_id, $form_values) {
  if ($form_values['op'] == t('Delete')) {
    _custom_pagers_delete_pager($form_values['pid']);
  }
  else {
    $pager = (object)$form_values;
    $pager->node_type = implode(',', $pager->node_type);
    _custom_pagers_save_pager($pager);
  }
  return 'admin/build/custom_pagers';
}

function _custom_pagers_load_pager($pid) {
  $sql = 'SELECT * FROM {custom_pager} WHERE pid = %d';
  $result = db_query($sql, $pid);
  $pager = db_fetch_object($result);
  return $pager;
}

function _custom_pagers_load_for_type($type) {
  static $pagers;
  if (!isset($pagers)) {
    $pagers = array();
    $sql = "SELECT * FROM {custom_pager}";
    $result = db_query($sql);
    while ($pager = db_fetch_object($result)) {
      $types = explode(',', $pager->node_type);
      foreach ($types as $node_type) {
        $pagers[$node_type] = $pager;
      }
    }
  }
  return $pagers[$type];
}

function _custom_pagers_load_all_pagers($refresh = FALSE) {
  static $pagers;
  if ($refresh || !isset($pagers)) {
    $sql = 'SELECT * FROM {custom_pager}';
    $result = db_query($sql);

    $pagers = array();
    while($pager = db_fetch_object($result)) {
      $pagers[] = $pager;
    }
  }
  return $pagers;
}

function _custom_pagers_save_pager($pager = NULL) {
  if (isset($pager->pid)) {
    $sql  = "UPDATE {custom_pager} SET";
    $sql .= " view = '%s', args = '%s', node_type = '%s', position = '%s'";
    $sql .= " WHERE pid = %d";
    db_query($sql, $pager->view, $pager->args, $pager->node_type, $pager->position, $pager->pid);
  }
  else {
    $sql  = "INSERT INTO {custom_pager}";
    $sql .= " (view, args, position, node_type)";
    $sql .= " VALUES ('%s',  '%s',  '%s', '%s')";
    db_query($sql, $pager->view, $pager->args, $pager->position, $pager->node_type);
  }
}

function _custom_pagers_delete_pager($pid) {
  $sql = 'DELETE FROM {custom_pager} WHERE pid = %d';
  db_query($sql, $pid);
}

function _custom_pagers_replace_placeholders($node, $haystack) {
  $replacements = custom_pagers_substitutions('data', $node);

  $placeholders = array_keys($replacements);
  $values = array_values($replacements);

  $result = str_replace($placeholders, $values, $haystack);
  return $result;
}

function custom_pagers_substitutions($mode = 'help', $node = NULL) {
  global $user;
  if ($mode == 'data') {
    $terms = taxonomy_node_get_terms($node->nid);
    if (count($terms)) {
      $top_term = $term[0]->tid;
    }
    $replacements = array(
      '%author_id' => $node->uid,
      '%author_name' => $node->name,
      '%node_id' => $node->nid,
      '%node_type' => $node->type,
      '%top_term'  => $top_term,
      '%created_d' => date('d', $node->created),
      '%created_D' => date('D', $node->created),
      '%created_j' => date('j', $node->created),
      '%created_l' => date('l', $node->created),
      '%created_F' => date('F', $node->created),
      '%created_m' => date('m', $node->created),
      '%created_M' => date('M', $node->created),
      '%created_n' => date('n', $node->created),
      '%created_y' => date('y', $node->created),
      '%created_Y' => date('Y', $node->created),
    );
  }
  elseif ($mode == 'help') {
    $replacements = array(
      '%author_id' => "The node author's uid",
      '%author_name' => "The node author's name",
      '%node_id' => "The current node's id",
      '%node_type' => "The current node's type",
      '%top_term'  => "The ID of the node's highest weighted taxonomy term",
      '%created_j' => "Node creation date: Date as number",
      '%created_d' => "Node creation date: Date as zero-padded number",
      '%created_D' => "Node creation date: Day of week as three-letter abbreviation",
      '%created_l' => "Node creation date: Day of week as full word",
      '%created_F' => "Node creation date: Day of week as number",
      '%created_m' => "Node creation date: Month as full word",
      '%created_M' => "Node creation date: Month as zero-padded number",
      '%created_n' => "Node creation date: Month as three-letter abbreviation",
      '%created_y' => "Node creation date: Year as four-digit number",
      '%created_Y' => "Node creation date: Year as two-digit number",
    );
   }
   return $replacements;
}


function custom_pager_build_nav($pager, $node) {
  $cache = cache_get('custom_pagers_' . $pager->pid);
  if ($cache) {
    $list = unserialize($cache->data);
  }
  else {
    $list = array();
    $args = explode("\n", $pager->args);
    $args = _custom_pagers_replace_placeholders($node, $args);
    $view = views_get_view($pager->view);
    $tmp = views_build_view('items', $view, $args);
    foreach($tmp['items'] as $item) {
      $list[] = $item->nid;
    }
    cache_set('custom_pagers_' . $pager->pid, 'cache', serialize($list));
  }

  return pager_entries_by_val($node->nid, $list);
}

// Helper functions to pull proper entries from a list of nids.

function pager_entries_by_val($value, $list) {
  $list = array_values($list);
  foreach ($list as $k => $v) {
    if ($v == $value) {
      $key = $k;
    }
  }
  if (!isset($key)) {
    $key = 0;
  }
  return pager_entries_by_key($key, $list);
}

function pager_entries_by_key($key, $list, $increment = 1) {
  $list = array_values($list);
  $nav = array(
    'first' => $list[0],
    'prev' => $list[max($key - $increment, 0)],
    'current_index' => $key,
    'next' => $list[min($key + $increment, (count($list) - 1))],
    'last' => $list[count($list) - 1]
  );

  foreach($nav as $k => $v) {
    if ($nav[$k] == $list[$key]) {
      $nav[$k] = NULL;
    }
  }
  return $nav;
}

function theme_custom_pager($nav_array, $node, $pager) {
  $output .= "<div class='custom-pager custom-pager-$pager->pid'>";
  if ($nav_array['prev']) {
    $prev_node = node_load($nav_array['prev']);
    $output .= "<ul><li class='previous'>" . l($prev_node->title, "node/$prev_node->nid") . "</li>";
  }
  if ($nav_array['next']) {
    $next_node = node_load($nav_array['next']);
    $output .= "<ul><li class='next'>" . l($next_node->title, "node/$next_node->nid") . "</li>";
  }
  $output .= "</div>";
  
  return $output;
}